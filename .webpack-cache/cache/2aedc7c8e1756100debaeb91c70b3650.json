{"remainingRequest":"/wiki/node_modules/babel-loader/lib/index.js??ref--0-1!/wiki/node_modules/vue-loader/lib/index.js??vue-loader-options!/wiki/client/components/editor/editor-markdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/wiki/client/components/editor/editor-markdown.vue","mtime":1742104565005},{"path":"/wiki/.babelrc","mtime":1742104564943},{"path":"/wiki/node_modules/cache-loader/dist/cjs.js","mtime":1742128641734},{"path":"/wiki/node_modules/babel-loader/lib/index.js","mtime":1742128638731},{"path":"/wiki/node_modules/vue-loader/lib/index.js","mtime":1742128750323}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}